PersonID = { 0, 1 }
datatype Sides = inside | outside
channel enter, leave, detect : Sides . PersonID
channel rotate
aDoor = {| enter, leave, rotate |}
Door = 
  let 
    State(Outside,RotatingIn,Inside,RotatingOut) = 
      empty(Outside) & enter.outside?p  -> State({p},RotatingIn, Inside, RotatingOut)
      []
      ([]p : Outside @ leave.outside.p -> State({},RotatingIn,Inside, RotatingOut))
      []
      empty(Inside) & enter.inside?p -> State(Outside,RotatingIn,{p},RotatingOut)
      []
      ([] p: Inside @ leave.inside.p -> State(Outside,RotatingIn,{}, RotatingOut))
      []
      rotate -> State(RotatingOut,Outside,RotatingIn,Inside)
  within
    State({},{},{},{})

aDoorController = {| detect, rotate |}
DoorController = 
  let
    Rotates(n) = 
       rotate -> Rotates(n-1)
       []
       detect?s?p -> Rotates(4)
  within
    Rotates(0)

aConstraint(p) = { enter.s.p, leave.s.p, detect.s.p | s <- Sides }
Constraint(p) = 
  let 
    InTheDoor = leave?s!p -> NotInTheDoor
    NotInTheDoor = detect?s!p -> enter!s!p -> InTheDoor
  within
    NotInTheDoor

aAssumption = {| enter, leave, detect |}
Assumption = || p : PersonID @ [aConstraint(p)] Constraint(p)

aDoorSystem = {| enter, leave, rotate, detect |}
DoorSystem = DoorController [ aDoorController || aDoor ] Door

DoorSystemWithAssumption = DoorSystem [ aDoorSystem || aAssumption ] Assumption

assert DoorSystemWithAssumption :[deadlock free]
