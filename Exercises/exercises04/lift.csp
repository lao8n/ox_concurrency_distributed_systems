channel up, down, arrive, close, open

LiftController(max) = 
  let 
    AtFloorOpen(n) = 
      close -> AtFloorClosed(n)
      []
      (n < max) & up -> arrive -> AtFloorOpen(n+1)
      []
      (n > 0) & down -> arrive -> AtFloorOpen(n-1)
    AtFloorClosed(n) = 
      open -> AtFloorOpen(n)
      []
      (n < max) & up -> arrive -> AtFloorOpen(n+1)
      []
      (n > 0) & down -> arrive -> AtFloorOpen(n-1)
  within
    AtFloorOpen(0)

ConsecutiveEventsSpec(max) = 
  let 
    ConsecutiveEventsSpec(n) = 
      (n > 0) & up -> ConsecutiveEventsSpec(n - 1)
      []
      (n == 0) & up -> STOP
      [] 
      down -> ConsecutiveEventsSpec(max)
      []
      []e : {arrive, close, open} @ e -> ConsecutiveEventsSpec(n)
  within
    ConsecutiveEventsSpec(max)

assert ConsecutiveEventsSpec(2) [T= LiftController(2)
