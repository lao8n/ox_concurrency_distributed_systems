datatype Place = a | b

Friend = {1..4}
Three = {1..3}

channel prefer : Friend . Place
channel propose : Friend . Friend . Place
channel goto : Friend . Place

Good(i) =
    let
        Others = diff(Three,{i})

        Start =
            prefer.i.a -> Propose(a,Others,1,0)
            |~|
            prefer.i.b -> Propose(b,Others,0,1)

        Propose(p,S,A,B) =
            ( [] j : S @ propose.i.j.p ->
            Propose(p,diff(S,{j}),A,B) )
            []
            ( A + B <= 3 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B) )
            []
            ( A + B <= 3 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1) )
            []
            A >= 2 & goto.i.a -> STOP
            []
            B >= 2 & goto.i.b -> STOP
    within
        Start

proposals(i) =
    union ( {| propose.i |}, {| propose.j.i | j <- Friend |} )
Alpha(i) =
    union ( proposals(i), {| prefer.i, goto.i |} )
Evening =
    || i : Three @ [ Alpha(i) ] Good(i)

-- (a)

success(p) = 
    ||| i : Three @ goto.i.p -> STOP
Success = 
    success(a)
    |~|
    success(b)       

assert Success [FD= Evening \ {| prefer, propose |}

assert Evening :[deadlock free]

-- (b)

Good2(i) =
    let
        Others = diff(Three,{i})

        Start =
            prefer.i.a -> Propose(a,Others,1,0)
            |~|
            prefer.i.b -> Propose(b,Others,0,1)

        Propose(p,S,A,B) =
            ( [] j : S @ propose.i.j.p ->
            Propose(p,diff(S,{j}),A,B) )
            []
            ( A + B <= 3 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B) )
            []
            ( A + B <= 3 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1) )
            []
            empty(S) & A + B == 3 & A >= 2 & goto.i.a -> STOP
            []
            empty(S) & A + B == 3 & B >= 2 & goto.i.b -> STOP
    within
        Start

Evening2 =
    || i : Three @ [ Alpha(i) ] Good2(i)  

assert Success [FD= Evening2 \ {| prefer, propose |}

-- (c)

Good3(i) =
    let
        Others = diff(Friend,{i})

        Start =
            prefer.i.a -> Propose(a,Others,1,0)
            |~|
            prefer.i.b -> Propose(b,Others,0,1)

        Propose(p,S,A,B) =
            ( [] j : S @ propose.i.j.p ->
            Propose(p,diff(S,{j}),A,B) )
            []
            ( A + B <= 4 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B) )
            []
            ( A + B <= 4 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1) )
            []
            empty(S) & A + B == 4 & A >= 3 & goto.i.a -> STOP
            []
            empty(S) & A + B == 4 & B >= 3 & goto.i.b -> STOP
    within
        Start

Evening3 =
    || i : Friend @ [ Alpha(i) ] Good3(i)  

success3(p) = 
    ||| i : Friend @ goto.i.p -> STOP
Success3 = 
    success3(a)
    |~|
    success3(b)     

assert Success3 [FD= Evening3 \ {| prefer, propose |}

-- (d)

channel declare : Friend . Friend . Place

Good4(i) =
    let
        Others = diff(Friend,{i})
        Start =
            prefer.i.a -> Propose(a,Others,1,0,Others)
            |~|
            prefer.i.b -> Propose(b,Others,0,1,Others)

        Propose(p,S,A,B,D) =
            -- send proposals
            ( [] j : S @ propose.i.j.p ->
            Propose(p,diff(S,{j}),A,B,D) )
            []
            -- receive proposals
            ( A + B < 4 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B,D) )
            []
            ( A + B < 4 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1,D) )
            []
            -- go to destination
            (empty(S) & A + B == 4 & A >= 3 & goto.i.a -> STOP)
            []
            (empty(S) & A + B == 4 & B >= 3 & goto.i.b -> STOP)
            []
            -- send declaration
            ( i == 1 & A == 2 & B == 2 & [] j : D @ declare.i.j.p ->
            Propose(p,S,A,B,diff(D,{j}))) 
            []
            ( i == 1 & empty(D) & goto.i.p -> STOP)
            []
            -- receive declarations
            ( i != 1 & declare.1.i.a -> goto.i.a -> STOP)
            []
            ( i != 1 & declare.1.i.b -> goto.i.b -> STOP)
    within
        Start

proposals4(i) =
    union ( {| propose.i |}, {| propose.j.i | j <- Friend |} )
declarations(i) = 
    union ( {| declare.i |}, {| declare.j.i | j <- Friend |} )
Alpha4(i) =
    union ( union( proposals4(i), declarations(i)) , {| prefer.i, goto.i |} )
Evening4 =
    || i : Friend @ [ Alpha4(i) ] Good4(i)  

success4(p) = 
    ||| i : Friend @ goto.i.p -> STOP
Success4 = 
    success4(a)
    |~|
    success4(b)     

assert Success4 [FD= Evening4 \ {| prefer, propose, declare |}

-- (e)

Okay5(i) =
    let
        MissingFriend = {1, 2}
        Others = diff(Friend,{i})
        Start =
            prefer.i.a -> Propose(a,MissingFriend,1,0,Others)
            |~|
            prefer.i.b -> Propose(b,MissingFriend,0,1,Others)

        Propose(p,S,A,B,D) =
            -- send proposals
            ( [] j : S @ propose.i.j.p -> 
            Propose(p,diff(S,{j}),A,B,D))
            []
            -- receive proposals
            ( A + B < 4 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B,D) )
            []
            ( A + B < 4 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1,D) )
            []
            -- go to destination
            (empty(S) & A + B == 4 & A >= 3 & goto.i.a -> STOP)
            []
            (empty(S) & A + B == 4 & B >= 3 & goto.i.b -> STOP)
            []
            -- send declaration
            ( i == 1 & A == 2 & B == 2 & [] j : D @ declare.i.j.p ->
            Propose(p,S,A,B,diff(D,{j}))) 
            []
            ( i == 1 & empty(D) & goto.i.p -> STOP)
            []
            -- receive declarations
            ( i != 1 & declare.1.i.a -> goto.i.a -> STOP)
            []
            ( i != 1 & declare.1.i.b -> goto.i.b -> STOP)
    within
        Start

Evening5 =
    || i : Friend @ [ Alpha4(i) ] if i == 4 then Okay5(i) else Good4(i)

success5(p) = 
    ||| i : Friend @ goto.i.p -> STOP
Success5 = 
    success5(a)
    |~|
    success5(b)     

assert Success5 [FD= Evening5 \ {| prefer, propose, declare |}

-- (f)

Time = {5..7}

channel time : Friend . Time

Good6(i) =
    let
        Others = diff(Friend,{i})
        Start =
            prefer.i.a -> Propose(a,Others,1,0,Others,5)
            |~|
            prefer.i.b -> Propose(b,Others,0,1,Others,5)

        Propose(p,S,A,B,D,T) =
            -- send proposals
            ( [] j : S @ propose.i.j.p ->
            Propose(p,diff(S,{j}),A,B,D,T) )
            []
            -- receive proposals
            ( A + B < 4 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B,D,T) )
            []
            ( A + B < 4 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1,D,T) )
            []
            -- go to destination
            ( empty(S) & A + B == 4 & A >= 3 & goto.i.a -> STOP)
            []
            ( empty(S) & A + B == 4 & B >= 3 & goto.i.b -> STOP)
            []
            ( T == 7 & A >= 3 & goto.i.a -> STOP)
            []
            ( T == 7 & B >= 3 & goto.i.b -> STOP)
            []
            -- send declaration
            ( i == 1 & A == 2 & B == 2 & [] j : D @ declare.i.j.p ->
            Propose(p,S,A,B,diff(D,{j}),T)) 
            []
            ( i == 1 & T == 6 & [] j : D @ declare.i.j.p -> 
            Propose(p,S,A,B,diff(D,{j}),T))
            []
            ( i == 1 & empty(D) & goto.i.p -> STOP)
            []
            -- receive declarations
            ( i != 1 & declare.1.i.a -> goto.i.a -> STOP)
            []
            ( i != 1 & declare.1.i.b -> goto.i.b -> STOP)
            []
            -- receive time
            ( [] t : Time @ time.i.t -> Propose(p, S, A, B, D, t))
    within
        Start

Okay6(i) =
    let
        MissingFriend = {1, 2}
        Others = diff(Friend,{i})
        Start =
            prefer.i.a -> Propose(a,MissingFriend,1,0,Others,5)
            |~|
            prefer.i.b -> Propose(b,MissingFriend,0,1,Others,5)

        Propose(p,S,A,B,D,T) =
            -- send proposals
            ( [] j : S @ propose.i.j.p -> 
            Propose(p,diff(S,{j}),A,B,D,T))
            []
            -- receive proposals
            ( A + B < 4 & [] j : Others @ propose.j.i.a ->
            Propose(p,S,A+1,B,D,T) )
            []
            ( A + B < 4 & [] j : Others @ propose.j.i.b ->
            Propose(p,S,A,B+1,D,T) )
            []
            -- go to destination
            (empty(S) & A + B == 4 & A >= 3 & goto.i.a -> STOP)
            []
            (empty(S) & A + B == 4 & B >= 3 & goto.i.b -> STOP)
            []
            (T == 7 & A >= 3 & goto.i.a -> STOP)
            []
            (T == 7 & B >= 3 & goto.i.b -> STOP)
            []
            -- remove send declaration as okay never friend 1
            -- receive declarations
            ( i != 1 & declare.1.i.a -> goto.i.a -> STOP)
            []
            ( i != 1 & declare.1.i.b -> goto.i.b -> STOP)
            []
            -- receive time
            ( [] t : Time @ time.i.t -> Propose(p, S, A, B, D, t))
    within
        Start

Time6(start) = 
    let
        Time(S, t) = 
            ([] j : S @ time.j.t -> Time(diff(S,{j}), t))
            []
            (empty(S) & t < 7 & time.1.(t+1)-> Time(diff(Friend,{1}), t+1))
            []
            (empty(S) & t == 7 & STOP)
    within
        Time(Friend, start)

timeAlpha(i) =
    union ( {| time.i |}, {| time.i.t | t <- Time |})
Alpha6(i) =
    union ( union( proposals4(i), declarations(i)) , {| prefer.i, goto.i |} )
Evening6(t) =
    || i : Friend @ [ Alpha6(i) ] (
        if i == 4 then Okay6(i) [|timeAlpha(i)|] Time6(t) 
        else Good6(i) [|timeAlpha(i)|] Time6(t))

success6(p) = 
    ||| i : Friend @ goto.i.p -> STOP
Success6 = 
    success6(a)
    |~|
    success6(b)     

assert Success6 [FD= Evening6(5) \ {| prefer, propose, declare, time |}
